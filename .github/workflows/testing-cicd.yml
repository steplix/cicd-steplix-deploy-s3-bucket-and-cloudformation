name: Push in testing branch
run-name: >
  "Deploying testing and creating PR to ${{ vars.DESTINATION_PR_ON_TESTING_WORKFLOW }}"
on:
  push:
    branches:
      - testing


jobs:

  build-cloudformation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Execute create-bucket workflow
        uses: ./.github/workflows/build-cloudformation.yml

  build_deploy:
    needs: build-cloudformation
    runs-on: ubuntu-latest
    steps:
      #BUILD
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ vars.NODE_VERSION }}
      - name: Update ROBOTS variable
        run: ./update_variables.sh ${{ vars.META_ROBOTS_TESTING }};
      - run: npm ci
      - run: npm run release
      # GET DISTRIBUTION_ID
      - uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.TEST_AWS_REGION }}
      - name: Get CloudFront distribution ID by alias
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query 'DistributionList.Items[?Aliases.Items[0]==`${{ vars.SUB_DOMAIN }}.${{ vars.DOMAIN }}`].Id' --output text)
          echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV
      #UPLOAD
      - name: copy files to S3
        run: |
          aws s3 sync out s3://${{ vars.SUB_DOMAIN }}.${{ vars.DOMAIN }}
      - name: Cloudfront invalidation
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ env.DISTRIBUTION_ID }} --paths "/*"
        

#   generate-pr:
#     needs: build_deploy
#     uses: ./.github/workflows/generate-pr.yml
#     with:
#       destination-branch-name: ${{ vars.DESTINATION_PR_ON_TESTING_WORKFLOW }}
#       pr-title: "<patch> is TAG VERSION INCREMENT: PUSHING testing INTO ${{ vars.DESTINATION_PR_ON_TESTING_WORKFLOW }}"

#   notify:
#     if: ${{ always() }}
#     needs: [ build_deploy,generate-pr ]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Notify Slack
#         uses: steplix/cicd-notify@0.0.17
#         with:
#           template: 'push'
#           status: ${{ needs.build_deploy.result || needs.generate-pr.result }}
#           slack_webhook_url: ${{ secrets.SLACK_WEBHOOK }}